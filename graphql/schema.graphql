interface Node {
  id: ID!
}

type Viewer implements Node {
  id: ID!
  firstName: String
  lastName: String
  email: String
  phone: String
  documents(
    first: Int
    after: String
  ): DocumentsConnection
  # groups: GroupsConnection
}


type Document implements Node {
  id: ID!
  userId: ID!
  type: String
  title: String
  content: String!
  accessLevel: Int
  tags: [String]
  createdAt: String
  updatedAt: String
}

type DocumentsConnection {
  edges: [DocumentsConnectionEdge]
  pageInfo: PageInfo
}

type PageInfo {
  startCursor: String
  endCursor: String
  lastCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type DocumentsConnectionEdge {
  node: Document
  cursor: String
}

# type Group implements Node {
#   id: ID!
#   name: String
#   adminIds: [String]!
#   documents: DocumentsConnection
# }

type Query {
  viewer: Viewer
  document(id: String!): Document
}

input Permission {
  key: String!
  value: Int!
}

type Mutation {
  addDocument(type: String!, title: String, content: String!): DocumentMutationResponseWithEdge
  updateDocument(id: String!, title: String, content: String): DocumentMutationResponseWithEdge
  updateDocumentPermissions(id: String!, permissions: [Permission]!): DocumentMutationResponse
  deleteDocument(id: String!): DocumentMutationResponse
}

type DocumentMutationResponseWithEdge {
  viewer: Viewer
  documentEdge: DocumentsConnectionEdge
}

type DocumentMutationResponse {
  viewer: Viewer
}